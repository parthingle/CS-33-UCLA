
/* 
 * bang - Compute !x without using !
 *   Examples: bang(3) = 0, bang(0) = 1
 *   Legal ops: ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 4 
 */
int bang(int x) { //done.
	  
	  return ((((~x + 1) | x) >> 31) + 1);
}
/*
 * bitCount - returns count of number of 1's in word
 *   Examples: bitCount(5) = 2, bitCount(7) = 3
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 40
 *   Rating: 4
 */
int bitCount(int x) {//done.
  
	int x1 = 0x11 |(0x11<<8);
	int x2 = x1 | (x1 << 16);
	
	int res = x&x2;
	res = res+ ((x >> 1)&x2);
	res = res+ ((x >> 2)&x2);
	res = res+ ((x >> 3)&x2);

	res = res + (res >> 16);
	x1 = 0xF|(0xF << 8);
	res = (res&x1) + ((res >> 4)&x1);
	return ((res + (res >> 8)) & 0x3F);

}
/* 
 * bitOr - x|y using only ~ and & 
 *   Example: bitOr(6, 5) = 7
 *   Legal ops: ~ &
 *   Max ops: 8
 *   Rating: 1
 */
int bitOr(int x, int y) {//done.
  return ~(~x&~y);
}
/*
 * bitRepeat - repeat x's low-order n bits until word is full.
 *   Can assume that 1 <= n <= 32.
 *   Examples: bitRepeat(1, 1) = -1
 *             bitRepeat(7, 4) = 0x77777777
 *             bitRepeat(0x13f, 8) = 0x3f3f3f3f
 *             bitRepeat(0xfffe02, 9) = 0x10080402
 *             bitRepeat(-559038737, 31) = -559038737
 *             bitRepeat(-559038737, 32) = -559038737
 *   Legal ops: int and unsigned ! ~ & ^ | + - * / % << >>
 *             (This is more general than the usual integer coding rules.)
 *   Max ops: 40
 *   Rating: 4
 */
int bitRepeat(int x, int n) {
	

	unsigned ux = x;
	int shift = 32 - n;
	int repeat = ((ux << shift) >> shift);

	

	repeat = repeat | (repeat << n&(~((31 - n) >> 31)));
	n=n << 1;

	repeat = repeat | (repeat << n&(~((31 - n) >> 31)));
	n=n << 1;

	repeat = repeat | (repeat << n&(~((31 - n) >> 31)));
	n=n << 1;

	repeat = repeat | (repeat << n&(~((31 - n) >> 31)));
	n=n << 1;

	repeat = repeat | (repeat << n&(~((31 - n) >> 31)));
	n=n << 1;

	return repeat;


}
/* 
 * fitsBits - return 1 if x can be represented as an 
 *  n-bit, two's complement integer.
 *   1 <= n <= 32
 *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 2
 */
int fitsBits(int x, int n) {//done.
	return !(((~x & (x >> 31)) + (x & ~(x >> 31))) >> (n + ~0));
}
/* 
 * getByte - Extract byte n from word x
 *   Bytes numbered from 0 (LSB) to 3 (MSB)
 *   Examples: getByte(0x12345678,1) = 0x56
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 6
 *   Rating: 2
 */
int getByte(int x, int n) { //done.
	int x1 = 0xff;
	return ((x&(x1 << (n << 3))) >> (n << 3))& x1;
}
/* 
 * isLessOrEqual - if x <= y  then return 1, else return 0 
 *   Example: isLessOrEqual(4,5) = 1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 24
 *   Rating: 3
 */
int isLessOrEqual(int x, int y) {//done.
	
	/*/int x2 = !(~(x + ~(1 << 31)));  //== 1 when x = tmin, 0 otherwise
	//int y2 = !(~(y + (1 << 31)));	//==1 when y = tmax, 0 otherwise
	int x3 = !(!(~(x + (1 << 31))));	//==0 when x=tmax, 1 otherwise
	int signx = !(x >> 31);
	//int signy = !(y >> 31);
	//int signdiff = signy + (~signx + 1);
	int k = (x^y)&signx;

	/*if(x>y)
		{
			int signDiff = 0;
		}
	*/
	
	
	int sign_x = x >> 31;	
	int sign_y = y >> 31;

	int equal = !(sign_x ^ sign_y) & ((~y + x) >> 31);	
	int notEqual = sign_x & !sign_y;

	return !(!(equal | notEqual));

	/*/return (x2 |( ((!((y + ((~x) + 1)) >> 31)) & 1) & x3) & ( | y2);
	return ((((!((y + ((~x) + 1)) >> 31)) & 1) & x3) & (k));

	*/
}
/* 
 * isPositive - return 1 if x > 0, return 0 otherwise 
 *   Example: isPositive(-1) = 0.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 8
 *   Rating: 3
 */
int isPositive(int x) {//done.
  return !((x&(1 << 31)) | !x);
}
/* 
 * logicalShift - shift x to the right by n, using a logical shift
 *   Can assume that 0 <= n <= 31
 *   Examples: logicalShift(0x87654321,4) = 0x08765432
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3 
 */
int logicalShift(int x, int n) {//done.
	
	int op = (1 << 31) >> 31;
	int t = (~n + 1);

	int shift = ((0x20)&t);

	op = (op << shift);

	return (x >> n) + (op);
}
/* 
 * tmin - return minimum two's complement integer 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 4
 *   Rating: 1
 */
int tmin(void) {//done.
  return 1<<31;
}


/* 
 * bitNor - ~(x|y) using only ~ and & 
 *   Example: bitNor(0x6, 0x5) = 0xFFFFFFF8
 *   Legal ops: ~ &
 *   Max ops: 8
 *   Rating: 1
 */
int bitNor(int x, int y) 
{
	// Applied DeMorgan's Law to expression:
	// ~(x|y)

	return (~x & ~y);
}

/* 
 * bitXor - x^y using only ~ and & 
 *   Example: bitXor(4, 5) = 1
 *   Legal ops: ~ &
 *   Max ops: 14
 *   Rating: 2
 */
int bitXor(int x, int y)
{
	// Applied DeMorgan's Law to expression:
	// (~x & y) | (x & ~y)
	// which resulted from expression:
	// x^y

	return (~(~(~x & y) & ~(x & ~y)));
}


/* 
 * copyLSB - set all bits of result to least significant bit of x
 *   Example: copyLSB(5) = 0xFFFFFFFF, copyLSB(6) = 0x00000000
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 5
 *   Rating: 2
 */
int copyLSB(int x)
{
	// x is first shifted left 31 bits to remove all but least significant bit.
	// x is then arithmetically shifted right 31 bits to copy the least significant bit to all positions.
	return ((x << 31) >> 31);
}

/* 
 * leastBitPos - return a mask that marks the position of the
 *               least significant 1 bit. If x == 0, return 0
 *   Example: leastBitPos(96) = 0x20
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 6
 *   Rating: 4 
 */
int leastBitPos(int x)
{
        // The logical negative value of x.
	int negative_x = ~x + 1;

	// x and the logical negative value of x combined with the & operator properly produce the desired mask.
	return(x & negative_x);
}

/* 
 * TMax - return maximum two's complement integer 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 4
 *   Rating: 1
 */
int tmax(void)
{
	// Constant representing binary value: 1000 0000
	int x = 0x80;

	// The compliment of the binary value 1000 0000 shifted 24 bits to the left produces the following binary value:
	// 0111 1111 1111 1111 1111 1111 1111 1111
	// This is the largest 32-bit two's compliment integer
	return(~(x << 24));
}

/* 
 * isNonNegative - return 1 if x >= 0, return 0 otherwise 
 *   Example: isNonNegative(-1) = 0.  isNonNegative(0) = 1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 6
 *   Rating: 3
 */
int isNonNegative(int x)
{

        // Boolean value indicating sign of x
        // 1 = Negative
        // 0 = Non-Negative
        int sign_x = x >> 31;
	
	// The negation of the sign bit of value x computes the appropriate boolean return value.
	return (!(sign_x));
}

/* 
 * isGreater - if x > y  then return 1, else return 0 
 *   Example: isGreater(4,5) = 0, isGreater(5,4) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 24
 *   Rating: 3
 */
int isGreater(int x, int y)
{
        // Boolean value indicating sign of x
        // 1 = Negative
        // 0 = Non-Negative
        int sign_x = x >> 31;

        // Boolean value indicating sign of y
        // 1 = Negative
        // 0 = Non-Negative
        int sign_y = y >> 31;

	// if the signs are equal, then
	// if x is larger, sign bit of (~y + x) is 0
	// if y is larger, sign bit of (~y + x) is 1
	int equal = !(sign_x ^ sign_y) & ((~y + x) >> 31);

	// if signs are not equal, these principles are reversed.
	int notEqual = sign_x & !sign_y;

	// this | returns 0 when it is x is greater, so you have to negate it.
	return !( equal | notEqual);
}

/* 
 * divpwr2 - Compute x/(2^n), for 0 <= n <= 30
 *  Round toward zero
 *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2
 *   Legal ops: ! ~ & ^ | + << >> *   Max ops: 15
 *   Rating: 2
 */
int divpwr2(int x, int n)
{
	// Something is needed to account for x >> n if positive and x >> n + 1 if negative

	// Subtract 1 from 2^n
	// This accounts for the need to + 1
	int mask = (1 << n) + ~0;

	// Use & operator on mask and sign bit of x 
	int equalizer = (x >> 31) & mask;

	// Adds 1 if x was originally negative
	// Adds 0 if x was originally positive
	return (x + equalizer) >> n;
}

/* 
 * abs - absolute value of x (except returns TMin for TMin)
 *   Example: abs(-1) = 1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 10
 *   Rating: 4
 */
int abs(int x)
{
        // Boolean value indicating sign of x
        // 1 = Negative
        // 0 = Non-Negative
        int sign_x = x >> 31;

	// XOR of value x and the sign bit of value x plus 1 plus the compliment of the sign bit of x returns the absolute value of x.
	return((x ^ (sign_x)) + (1 + ( ~(sign_x))));
}

/* 
 * addOK - Determine if can compute x+y without overflow
 *   Example: addOK(0x80000000,0x80000000) = 0,
 *            addOK(0x80000000,0x70000000) = 1, 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3
 */
int addOK(int x, int y)
{
	// The sum of x and y
	int xy_sum = x + y;
	
	// Boolean value indicating sign of x
	// 1 = Negative
	// 0 = Non-Negative
	int sign_x = x >> 31;

        // Boolean value indicating sign of y
        // 1 = Negative
        // 0 = Non-Negative
	int sign_y = y >> 31;

        // Boolean value indicating sign of the sum of x and y
        // 1 = Negative
        // 0 = Non-Negative
	int sign_sum_xy = xy_sum >> 31;

	// An overflow occurs when the sign of x and y are the same, but the sign of the sum of x and y is different
	return !(~(sign_x ^ sign_y) & (sign_x ^ sign_sum_xy));
}